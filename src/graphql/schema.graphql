schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  listCamera: [Camera!]
}

type Mutation {
  injestFrame(
    cameraId: String!
    ts: String!
    s3url: String
    ppeResult: PPEResultInput
    ppeViolationCount: Int
    pplCount: Int
  ): Frame
  addCamera(cameraId: String!): Camera
  newAlarm(
    cameraId: String!
    ts: String!
    s3url: String
    status: String
    persons: [PersonInput]
  ): Alarm
}

type Subscription {
  onNewFrame(cameraId: String!): Frame
    @aws_subscribe(mutations: ["injestFrame"])
  onNewAlarm(cameraId: String!): Alarm
    @aws_subscribe(mutations: ["newAlarm"])
}

type Camera {
  id: String!
  latestFrame: Frame
}

type Frame {
  cameraId: String!
  ts: String!
  s3url: String
  ppeResult: PPEResult
  persons: [Person]
  ppeViolationCount: Int
  pplCount: Int
}

type Alarm {
  cameraId: String!
  ts: String!
  s3url: String
  status: String
  persons: [Person]
}

type PPEResult {
  personsWithRequiredEquipment: [Person]
  personsWithoutRequiredEquipment: [Person]
}

input PPEResultInput {
  personsWithRequiredEquipment: [PersonInput!]
  personsWithoutRequiredEquipment: [PersonInput!]
}

type Person {
  id: Int!
  boundingBox: BoundingBox!
  missingMask: Boolean
  missingHelmet: Boolean
  faceId: String
}

input PersonInput {
  id: Int!
  boundingBox: BoundingBoxInput!
  missingMask: Boolean
  missingHelmet: Boolean
  faceId: String
}

type BoundingBox {
  width: Float!
  height: Float!
  left: Float!
  top: Float!
}

input BoundingBoxInput {
  width: Float!
  height: Float!
  left: Float!
  top: Float!
}
